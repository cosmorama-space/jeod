//=============================================================================
// Notices:
//
// Copyright Â© 2022 United States Government as represented by the Administrator
// of the National Aeronautics and Space Administration.  All Rights Reserved.
//
//
// Disclaimers:
//
// No Warranty: THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY WARRANTY OF
// ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY, INCLUDING, BUT NOT LIMITED
// TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL CONFORM TO SPECIFICATIONS, ANY
// IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR
// FREEDOM FROM INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR
// FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM TO THE
// SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN ANY MANNER, CONSTITUTE AN
// ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT OF ANY RESULTS,
// RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY OTHER APPLICATIONS
// RESULTING FROM USE OF THE SUBJECT SOFTWARE.  FURTHER, GOVERNMENT AGENCY
// DISCLAIMS ALL WARRANTIES AND LIABILITIES REGARDING THIRD-PARTY SOFTWARE,
// IF PRESENT IN THE ORIGINAL SOFTWARE, AND DISTRIBUTES IT "AS IS."
//
// Waiver and Indemnity:  RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS AGAINST THE
// UNITED STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
// PRIOR RECIPIENT.  IF RECIPIENT'S USE OF THE SUBJECT SOFTWARE RESULTS IN ANY
// LIABILITIES, DEMANDS, DAMAGES, EXPENSES OR LOSSES ARISING FROM SUCH USE,
// INCLUDING ANY DAMAGES FROM PRODUCTS BASED ON, OR RESULTING FROM, RECIPIENT'S
// USE OF THE SUBJECT SOFTWARE, RECIPIENT SHALL INDEMNIFY AND HOLD HARMLESS THE
// UNITED STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
// PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY LAW.  RECIPIENT'S SOLE REMEDY FOR
// ANY SUCH MATTER SHALL BE THE IMMEDIATE, UNILATERAL TERMINATION OF THIS
// AGREEMENT.
//
//=============================================================================
//
//
/*************     TRICK HEADER     ******************************************
VehicleBasicSimObject
Purpose:( This sim object models a vehicle operating within a TCAM atmosphere.)
*****************************************************************************/
#ifndef SIM_OBJECT_VEHICLE_WITH_TCAM_ATMOSPHERE
#define SIM_OBJECT_VEHICLE_WITH_TCAM_ATMOSPHERE

##include "environment/atmosphere/TCAM/include/TcamAtmosphereState.hh"
##include "utils/planet_fixed/planet_fixed_posn/include/planet_fixed_posn.hh"
##include "utils/planet_fixed/north_east_down/include/north_east_down.hh"
##include "environment/atmosphere/base_atmos/include/atmosphere_state.hh"
##include "environment/planet/include/planet.hh"

#include "vehicle_baseline.sm"
class VehicleTcamAtmSimObject : public VehicleBasicSimObject
{
 protected:
  // External references
  jeod::AtmosphereInterface & atmos_interface;
  jeod::Planet & planet;

 public:
  jeod::TcamAtmosphereState tcam_atmos_state;
  jeod::PlanetFixedPosition  pfix_pos;
  jeod::NorthEastDown ned_wind;

  // Constructor
  VehicleTcamAtmSimObject(  jeod::DynManager       & dyn_mngr_in,
                            jeod::Planet & planet_in,
                            jeod::AtmosphereInterface & atmos_interface_in)
    :
    VehicleBasicSimObject( dyn_mngr_in),
    planet(planet_in),
    atmos_interface(atmos_interface_in)
  {
     //
     // Initialization jobs
     //
     ("initialization") ned_wind.initialize( &(planet));
     ("initialization") pfix_pos.initialize( &planet);

     ("initialization") atmos_interface.setAtmosphere( &tcam_atmos_state);
     ("initialization") atmos_interface.tcamInit(pfix_pos);
     ("initialization") atmos_interface.update_state(
                        pfix_pos,
                        ned_wind.ned_frame.state.rot.T_parent_this,
                        ned_wind.ned_frame.state.rot.ang_vel_this);

     //
     // Environment class jobs
     //
     (DYNAMICS,"environment") pfix_pos.update_from_ellip(pfix_pos.ellip_coords);
     (DYNAMICS,"environment") ned_wind.update_from_ellip (pfix_pos.ellip_coords);
     (DYNAMICS,"environment") atmos_interface.update_state(
                               pfix_pos,
                               ned_wind.ned_frame.state.rot.T_parent_this,
                               ned_wind.ned_frame.state.rot.ang_vel_this);
// ADD UPDATE TIME!!!
  }

 private:
  VehicleTcamAtmSimObject (const VehicleTcamAtmSimObject&);
  VehicleTcamAtmSimObject & operator = (const VehicleTcamAtmSimObject&);
};
#endif
