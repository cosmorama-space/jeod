#!/bin/bash
#
# jeod_cm : a script to do most of the JEOD software test


# Parse the optional arguments
case $1 in
    -cp)
     Option="cp"
     shift
     ;;
    -ms)
     Option="ms"
     shift
     ;;
    -clean)
     Option="clean"
     shift
     ;;
    -run)
     Option="run"
     shift
     ;;
    -unit)
     Option="unit"
     shift
     ;;
    -verify)
     Option="verify"
     shift
     ;;
    -all)
     Option="all"
     shift
     ;;
    -cleanall)
     Option="cleanall"
     shift
     ;;
    -mkval)
     Option="mkval"
     shift
     ;;
    -mkdoc)
     Option="mkdoc"
     shift
     ;;
    *)
     Option="invalid"
     shift
     ;;
esac

if [ $# -gt 2 -o $Option = "invalid" ]; then
   echo
   echo "Usage: jeod_cm [option] [PATH] [RUN_NAME|clean]"
   echo
   echo "   Options:"
   echo "           -cp       : Compile all sims by default or under specified PATH in the argument"
   echo "           -ms       : Make spotless all the sims by default or under specified PATH"
   echo "           -clean    : Clean all SET_test/RUN_* by default or under specified PATH " 
   echo "                       and specified RUN_NAME in the second argument to the script"
   echo "           -run      : Run all the SET_test/RUN_* by default or under specified PATH"
   echo "                       and specified RUN_NAME in the second argument to the script"
   echo "           -unit     : Run all unit tests by default or under specified PATH and if"
   echo "                       specified 'clean' after PATH then cleans all the unit tests under PATH"
   echo "           -verify   : Verify all SET_test/RUN_* against its SET_test_val/RUN_* by default"
   echo "                       or under specified PATH and specified RUN_NAME given by second argument"
   echo "           -all      : Compiles sim, clean RUN_* and runs RUN_* under specified PATH in the"
   echo "                       argument"
   echo "           -cleanall : Make spotless all the sims and clean all SET_test/RUN_* by default or"
   echo "                       under specified PATH"
   echo "           -mkval    : Make validation directory SET_test_val/RUN_* off of SET_test/RUN_* "
   echo "                       under specified PATH"
   echo "           -mkdoc    : Make PDF documents for all models by default or in a specified model PATH and"
   echo "                       if 'clean' is specified after PATH argument, then cleans all documents metadata"
   echo "           PATH      : Default to \$JEOD_HOME, or relative directory path containing sims or models"
   echo "           RUN_NAME  : Optional, name of run that needs to be run under a sim, applies only if "
   echo "                       PATH is given" 
   echo "           clean     : Optional, cleans all unit tests or documents, depending if using -unit or"
   echo "                       -mk_doc, respectively; must specify PATH in order to use this"
   echo
   exit 1
fi

# if 2nd argument is given assign it to $runname
if [ $# -eq 2 ]; then
   runname=$2
fi

current=`pwd`

# cd into a directory if it exists and if directory is not SIM_\*
   if [[ $(basename $current) =~ "SIM" ]]; then
      sims=.
   elif [[ $1 =~ "SIM" ]]; then
      sims=$1
   elif [ $Option == "mkdoc" -o $Option == "unit" ]; then
# if generating documents, don't need to go to the for loop below
      sims=
   else
    
# check to see if $JEOD_HOME is set
      [[ -z "$JEOD_HOME" ]] && 
              { echo -e "\n\$JEOD_HOME needs to be set to top level JEOD directory\n";
                exit 2
                }
# if 1st argument is not given then assign $JEOD_HOME as default path
      cd ${1:-"$JEOD_HOME"} && sims=`find . -name SIM_\*` \
            || { echo -e "\n$1 is not a directory\n"; exit 3; }
   fi

# save off the current working directory until all task is done
indir=`pwd`

# Beginning time in seconds
begin=`date +%s`

for i in $sims; do
   [[ "$(dirname $i)" =~ "jeod_course" ]] && continue
   [[ "$(dirname $i)" =~ "unsupported" ]] && continue
   [[ "$(basename $i)" =~ .*_10$ ]] && continue
   [[ "$(basename $i)" =~ .*_T10$ ]] && continue

   cd $i
   [ $Option == "cp" -o $Option == "all" ] && [ ! `find . -name S_main_\*` ] && echo -e "\nCP sim $i .............................." \
                       && $JEOD_HOME/bin/jeod_cm/cp_sim 
   [ $Option == "ms" -o $Option == "cleanall" ] && [ `find . -name S_source.c` ] && echo -e "\nMake Spotless on $i .......................\n" \
                       && make spotless > /dev/null
   [ $Option == "clean" -o $Option == "cleanall" ] && $JEOD_HOME/bin/jeod_cm/clean_set $2  
   [ $Option == "run" -o $Option == "all" ] && $JEOD_HOME/bin/jeod_cm/run_set $2 
   [ $Option == "mkval" ] && $JEOD_HOME/bin/jeod_cm/mk_val $2
   [ $Option == "verify" ] && $JEOD_HOME/bin/jeod_cm/verify_set $2
   cd $indir
done

# building unit_test
[ $Option == "unit" ] && $JEOD_HOME/bin/jeod_cm/run_unit_test $1 $2

# This will clean ephem data
[ $Option == "cleanall" ] && cd $JEOD_HOME/models/environment/ephemerides/de4xx_ephem/data && make real_clean 

# This will generate PDF documents 
[ $Option == "mkdoc" ] && $JEOD_HOME/bin/jeod_cm/mk_doc $1 $2

# End time in seconds
end=`date +%s`
# Compute how long it took to do a specific jeod_cm related task
seconds=0
seconds=$(( $end - $begin ))
# Convert seconds into Hour Min Sec
hours=$(( $seconds / 3600 ))
seconds=$(( $seconds % 3600 ))
minutes=$(( $seconds / 60 ))
seconds=$(( $seconds % 60 ))

echo -e "\nTotal time to run `basename $0` -$Option $@ in ${indir#$JEOD_HOME/}" >> $JEOD_HOME/elapsed_time
echo -e "$hours hour(s) $minutes minute(s) $seconds second(s)" >> $JEOD_HOME/elapsed_time

# This will put a line break at the end of error files
errorfiles=`find $JEOD_HOME/ -maxdepth 1 -name \*_error -type f`
if [ "$errorfiles" != '' ]; then 
   for ii in $errorfiles; do
      sed -e '/^=.*$/ d' $ii > "$ii.sub"
      rm -f $ii
      sed -e '/^$/ d' "$ii.sub" > "$ii"
      rm -f "$ii.sub"
      echo -e "==============================================================\n\n" >> $ii
   done
fi

[ -e $JEOD_HOME/elapsed_time ] && \
     echo -e "==============================================================\n" >> $JEOD_HOME/elapsed_time

echo -e "\nDONE...................................................................\n"        

cd $current
