#!/bin/bash
#
# mk_val : script to make validation directory SET_test_val/RUN_*
#          off of SET_test/RUN_* or for a given <RUN_NAME> 
#    Usage: run_set <RUN_NAME>

#temp variable to store current working directory
cddir=`pwd`

rname=${1:-RUN\*}
runs=`find SET_test -name $rname`

# Checks to see if Log_data exist with data recording file
grep -R name Log_data/*.d >& /dev/null
if [ $? == 0 ]; then
# Temporary variable to check if log name will contain VEH_NAME 
   array=(`grep -R name Log_data/*.d | awk '{print $3}' | cut -c2- | sed 's/"//' | sed 's/;//' | sed 's/\n/ /' `)
   count=0
   for i in ${array[@]}; do
      if ([[ $i =~ VEH ]] && [[ $i =~ NAME ]]); then 
         ARR[$count]=${i##*_}
      else
         ARR[count]="${i}"
      fi
      count=$(( $count + 1 ))
   done

# check to see if there are any logname present
   [[ ${#ARR[*]} == 0 ]] && { 
      echo "No Log Name in ${cddir#$JEOD_HOME/}/Log_data/*.d" >> $JEOD_HOME/val_error
      exit 5 
      }
else
   echo -e "No data recording file in ${cddir#$JEOD_HOME/}/Log_data ..." >> $JEOD_HOME/val_error
fi

# Copying SET_test/RUN* to SET_test_val/RUN* only if data exist in SET_test/RUN*
for ii in $runs; do
   [ ! -d ${ii/#SET_test/SET_test_val} ] && svn mkdir --parents ${ii/#SET_test/SET_test_val}
# check if SET_test/RUN* contains log files with data
   logfiles=`find $ii -name log_\* | grep -v header | grep -v mem | grep -v log_frame | grep -v jobs`
   if [[ ${#logfiles} == 0 ]]; then
      outfiles=`find $ii -name \*.out`
      if [[ ${#outfiles} == 0 ]]; then
# Outputs error message if there are not data to copy from
         echo -e "\nERROR: RUN ${cddir#$JEOD_HOME/}/$ii has NO data ... \n"
         continue
      else
         filename=$outfiles
      fi
   else
      filename=$logfiles
   fi

   for jj in $filename; do
      if [[ $(basename $jj) =~ "out" ]]; then
# Using time stamp to check if data that will be copied are already new and if they are then don't copy 
         [ -e ${jj/#SET_test/SET_test_val} ] && oldtime=`ls -lo ${jj/#SET_test/SET_test_val} | awk '{print $7}' | cut -d":" -f2` || oldtime="" 
         newtime=`date +%M`
         if [[ $oldtime != $newtime ]]; then
# Only copy result if they differ from SET_test/RUN*
            diff $jj ${jj/#SET_test/SET_test_val} >& /dev/null || { 
            echo -e "\nCopying ${cddir#$JEOD_HOME/}/$ii/$(basename ${jj}) to ${ii/#SET_test/SET_test_val} ......."
            cp $jj ${ii/#SET_test/SET_test_val} 
            }
         fi
      else
         for ((kk=0; kk < ${#ARR[*]}; kk++)); do
            if [[ "$(basename $jj)" =~ "${ARR[$kk]}" ]]; then
# Using time stamp to check if data that will be copied are already new and if they are then don't copy 
               [ -e ${jj/#SET_test/SET_test_val} ] && oldtime=`ls -lo ${jj/#SET_test/SET_test_val} | awk '{print $7}' | cut -d":" -f2` || oldtime="" 
               newtime=`date +%M`
               if [[ $oldtime != $newtime ]]; then
# Only copy result if they differ from SET_test/RUN*
                  diff $jj ${jj/#SET_test/SET_test_val} >& /dev/null || { 
                  echo -e "\nCopying ${cddir#$JEOD_HOME/}/$ii/$(basename ${jj}) to ${ii/#SET_test/SET_test_val} ......."
                  cp $jj ${ii/#SET_test/SET_test_val} 
                  }
               fi
# If the SET_test_val/RUN* data are just copied the first time, then add those data under version control
               [ -z "$oldtime" ] && svn add ${jj/#SET_test/SET_test_val}
               break
            fi
         done
      fi
   done
# Removes input file it it already under version control from SET_test_val directory since it is redundant
      [ -f ${ii/#SET_test/SET_test_val}/input ] && 
              svn delete ${ii/#SET_test/SET_test_val}/input
      [ -f ${ii/#SET_test/SET_test_val}/*.header ] &&
              svn delete ${ii/#SET_test/SET_test_val}/*.header 
done
