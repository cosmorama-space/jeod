%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% File: dynenvboilerplate.sty
% This file defines macros that establish document content.
% Note well: This file does not stand by itself. It is a part of dynenv.sty.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\ProvidesPackage{dynenvboilerplate}[2011/11/17 v2.2 Dynamics package macros]


% Define the stretchlongtable environment.
% A stretched longtable is a longtable with the table entries separated by a
% user-specified amount, defaulting to 1.2.
% Notes:
% - The environment is defined using lowlevel techniques because
%   stretchlongtable takes an optional <stretch> argument.
% - The optional argument uses angle brackets because longtable already
%   takes on optional argument.
\def\stretchlongtable{%
  \@ifnextchar<\@stretchlongtable{\@stretchlongtable<1.2>}}

\def\@stretchlongtable<#1>{%
  \let\@jeodsavestretch\arraystretch%
  \def\arraystretch{#1}
  \longtable}

\def\endstretchlongtable{%
  \endlongtable
  \let\arraystretch\@jeodsavestretch}

% Broken lines in the inventory table etc. look better when they are printed
% with a hanging indent.
\def\longentry{%
  \raggedright\hangindent 10pt\hangafter 1\noindent}


% The boilerplate macros use \iflabeldefined to cusomize boilerplate material.
% #1 - Label to be tested
% #2 - Content to be expanded if the label is defined
\newcommand\iflabeldefined[2]{
   \@ifundefined{r@#1}\relax{#2}}


% Construct chapter one of a document.
% Chapter one of most documents should have a very common appearance.
% They should differ only in section 1.1 (purpose and objectives) and
% section 1.3 (document history).
% #1 - Body of section 1.1 (purpose and objectives)
% #2 - Table entries in section 1.3 (document history)
\long\def\boilerplatechapterone#1#2{%
  \chapter{Introduction}\hyperdef{part}{intro}{}\label{ch:intro}%

  \section{Purpose and Objectives of the \MODELTITLE}

  #1

  \section{Context within JEOD}

  The following document is parent to this document:
  \begin{itemize}
  \item \hyperJEOD
  \end{itemize}

  The \MODELTITLEx forms a component of the \MODELGROUPx suite of
  models within \JEODid. It is located at \MODELPATH.

  \section{Document History}

  \begin{tabular}{||l|l|l|l|} \hline
  {\bf Author } & {\bf Date} & {\bf Revision} & {\bf Description} \\%
  \hline \hline
  #2
  \hline
  \end{tabular}%

  \section{Document Organization}

  This document is formatted in accordance with the 
  NASA Software Engineering Requirements Standard~\cite{NASA:SWE}.

  The document comprises chapters organized as follows:

  \begin{description}%
  \item[Chapter 1: Introduction] -%
  This introduction describes the objective and purpose of the \MODELTITLE.

  \item[Chapter 2: Product Requirements] -%
  The requirements chapter describes the requirements on the \MODELTITLE.

  \item[Chapter 3: Product Specification] -%
  The specification chapter describes
  the architecture and design of the \MODELTITLE.

  \item[Chapter 4: User Guide] -%
  The user guide chapter describes how to use the \MODELTITLE.

  \item[Chapter 5: Inspections, Tests, and Metrics] -%
  The inspections, tests, and metrics describes the procedures and results
  that demonstrate the satisfaction of the requirements for the \MODELTITLE.

  \end{description}%
}


% Construct the inventory section of a model document.
% Section 3.5 (inventory) of all model documents should be identical in nature.
% The macro \boilerplateinventory takes no arguments.
% The autogenerated file inventory.tex contains the model-specific content.
\long\def\boilerplateinventory{%
  \section{Inventory}

  All \MODELTITLEx files are located in {\tt \$\{JEOD\_HOME\}/\MODELPATH}.
  Relative to this directory,
  \begin{itemize}%
  \vspace{-0.2\baselineskip}%

  % Header and source files.
  \item Model header and source files are located
  in model {\tt include} and {\tt src} subdirectories.
  See table~\ref{tab:source_files} for a list of these
  configuration-managed files.
  \@ifundefined{r@tab:verification_files}{%
    \@ifundefined{r@tab:data_files}{%
      \relax
    }%
    {%
      (Note: Header and source files located inside model {\tt data}
      subdirectories are listed elsewhere.)
    }%
  }%
  {%
    \@ifundefined{r@tab:data_files}{%
      (Note: Header and source files located inside model {\tt verif}
      subdirectories are listed elsewhere.)
    }%
    {%
      (Note: Header and source files located inside {\tt data}
      and {\tt verif} subdirectories are listed elsewhere.)
    }%
  }%

  % Data files and other stuff.
  \iflabeldefined{tab:data_files}{%
  \vspace{-0.1\baselineskip}
  \item This model contains data files and miscellaneous files.
  See table~\ref{tab:data_files} for a list of these
  configuration-managed files.
  }%

  % Documentation files.
  \vspace{-0.1\baselineskip}
  \item Model documentation files are located in
  the model {\tt docs} subdirectory.
  See table~\ref{tab:documentation_files} for a list of the
  configuration-managed files in this directory.

  % Verification files.
  \iflabeldefined{tab:verification_files}{%
  \vspace{-0.1\baselineskip}
  \item Verification files are located
  in the model {\tt verif} subdirectories.
  See table~\ref{tab:verification_files} for a list of these
  configuration-managed files.
  }%
  \end{itemize}
  \input{inventory}
}


% Construct the requirements traceability section of a model document.
% Section 5.3 (requirements traceability) of most model documents should be
% identical in nature. (Documents with parts are an exception; they will
% need a custom trace table.)
% The macro \boilerplatetraceability takes no arguments.
% Custom content is generated by the \tracetable macro.
\long\def\boilerplatetraceability{%
  \section{Requirements Traceability}

  Table~\ref{tab:reqt_ivv_xref} summarizes the inspections and tests
  that demonstrate the satisfaction of the requirements levied on the model.

  \tracetable{Requirements Traceability}{tab:reqt_ivv_xref}{}
}


% Construct the metrics section of a model document.
% Section 5.4 (metrics) of all model documents should be identical in nature.
% The macro \boilerplatemetrics takes no arguments.
% The autogenerated files coarse_metrics.tex, metrix_metrics.tex, and
% code_coverage.tex contain the model-specific content.
\long\def\boilerplatemetrics{%
  \section{Metrics}

  Table~\ref{tab:coarse_metrics} presents coarse metrics on the source
  files that comprise the model.
  \input{coarse_metrics}

  \pagebreak
  Table~\ref{tab:metrix_metrics} presents the extended cyclomatic complexity
  (ECC) of the methods defined in the model.
  \input{metrix_metrics}

  \IfFileExists{code_coverage.tex}{%
    \pagebreak
    Table~\ref{tab:code_coverage} presents the code coverage of the 
    tests described earlier in this chapter.
    \input{code_coverage}}%
  {%
    \PackageWarning{dynenv}{%
      Code coverage has not been built for this model}}%
}

\endinput
