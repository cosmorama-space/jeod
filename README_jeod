==============================================================================
 Notices:

 Copyright Â© 2023 United States Government as represented by the Administrator
 of the National Aeronautics and Space Administration.  All Rights Reserved.


 Disclaimers:

 No Warranty: THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY WARRANTY OF
 ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY, INCLUDING, BUT NOT LIMITED
 TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL CONFORM TO SPECIFICATIONS, ANY
 IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR
 FREEDOM FROM INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR
 FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM TO THE
 SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN ANY MANNER, CONSTITUTE AN
 ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT OF ANY RESULTS,
 RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY OTHER APPLICATIONS
 RESULTING FROM USE OF THE SUBJECT SOFTWARE.  FURTHER, GOVERNMENT AGENCY
 DISCLAIMS ALL WARRANTIES AND LIABILITIES REGARDING THIRD-PARTY SOFTWARE,
 IF PRESENT IN THE ORIGINAL SOFTWARE, AND DISTRIBUTES IT "AS IS."

 Waiver and Indemnity:  RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS AGAINST THE
 UNITED STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
 PRIOR RECIPIENT.  IF RECIPIENT'S USE OF THE SUBJECT SOFTWARE RESULTS IN ANY
 LIABILITIES, DEMANDS, DAMAGES, EXPENSES OR LOSSES ARISING FROM SUCH USE,
 INCLUDING ANY DAMAGES FROM PRODUCTS BASED ON, OR RESULTING FROM, RECIPIENT'S
 USE OF THE SUBJECT SOFTWARE, RECIPIENT SHALL INDEMNIFY AND HOLD HARMLESS THE
 UNITED STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
 PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY LAW.  RECIPIENT'S SOLE REMEDY FOR
 ANY SUCH MATTER SHALL BE THE IMMEDIATE, UNILATERAL TERMINATION OF THIS
 AGREEMENT.

==============================================================================

July 2023

Contents

1. Overview
2. Usage
3. Key changes since the last release
4. Known issues
5. Regression testing
6. Change history

================================================================================
1. Overview
================================================================================

This section provides overview information about the Johnson Space Center
Engineering Orbital Dynamics (JEOD) software package.

This note describes the most recent release of JEOD, JEOD 5.1. The primary
objectives for 5.1 release of JEOD were to:

* Added support for Moon Mean Earth body fixed frame as alternative pfix frame.
* Added kinematic attachment capability that allow DynBody to be attached to a
  reference frame, which includes planet.
* Improved documentation on integration frame override after detach from parent
  body.
* Improved ease of use for calculating derivative states for a child body.
* Enhanced checkpoint-restart for standard STL containers in JEOD.
* Improved ephemeris data generation using mako template.
* Fix bugs.
* Improved code security.
* Improved verification sims.

The key features of this release are highlighted in section 3 below.


The JEOD 5.1 Release
****************************

The release comprises
* Models. The JEOD models provide the functionality needed to represent
  vehicles that translate and rotate in a space environment. The models are
  organized into four main groups: dynamics, environment, interactions, and
  utilities. Each of these four groups corresponds to a subdirectory of the
  JEOD models directory. The immediate subdirectory of each model group
  directory contains exactly one JEOD model. Models are accompanied with
  test artifacts to verify that a model satisfies its requirements. For JEOD
  5.1, there is also an experimental directory containing experimental
  models that are not yet rigorously verified and documented up to typical JEOD
  standards. Users planning to these experimental models should understand the
  risk associated with them and there are currently no plan for documentation
  and verification of these models.

* Test and Analysis Tools. Trick simulations have long been used to test the
  JEOD models. JEOD 5.1 contains Trick-compatible versions of all
  previously existing simulations, as well as some new simulations for
  testing new capabilities.

* Training Materials. Getting a picture of how JEOD works by reading the
  overview and model documentation can be tough. The JEOD training materials
  are located in the $JEOD_HOME/docs/Training directory. These materials
  systematically show users how to use JEOD via the course lecture notes,
  lessons covering every extant JEOD model (except the SPICE interface model
  and experimental models) and tutorial exercises of increasing complexity.

* Verification and Validation Simulations. In addition to the model-level
  verification testing, JEOD 5.1 has been tested against best estimate of
  trajectory (BET) data from various orbiting vehicles. These documented
  integrated tests not only demonstrate that JEOD properly models the space
  environment, they also serve as additional examples of how to use JEOD in a
  realistic simulation. For JEOD 5.1, some BET data were removed from the
  release so that JEOD can be host on Github.com. However, validation result
  are still presented in the top-level JEOD documentation.

* Top-level Documentation. JEOD is well documented from the top-level down.
  The top-level JEOD documentation is the file $JEOD_HOME/docs/JEOD.pdf.
  The dynamic comparison simulation is described in the file
  $JEOD_HOME/verif/SIM_dyncomp/docs/DYNCOMP.pdf.

* Model Documentation. Each model has a model document located in the file
  $JEOD_HOME/models/<model_group>/<model_name>/docs/<model_name>.pdf.

* HTML Pages. The Application Programmer Interface (API) to the JEOD models can
  be viewed by directing a browser to file://$JEOD_HOME/html/jeod/index.html.
  These HTML pages are automatically generated from the JEOD source code by
  doxygen. In addition to displaying the API, the JEOD PDF documentation files
  are accessible through these HTML pages.


================================================================================
2. Usage
================================================================================

Instructions for use in a Trick environment
*******************************************

The JEOD package is first and foremost a package designed for use in simulations
developed with the Trick simulation environment. This release of JEOD 5.1
was tested with Trick 19.6.0, using compiler gcc 4.8.5 on CentOS 7.6, 7.5.0 on
Ubuntu 18.04, 8.5.0 on Oracle Linux 8, and LLVM version 13.1.6 on Mac.

Required environment variables
------------------------------
The following environment variables must be set to use JEOD in conjunction
with the Trick simulation environment.

  JEOD_HOME             The JEOD_HOME environment variable must point to the
                        top-level JEOD directory (i.e., the directory that
                        contains this README_jeod file).

  TRICK_CFLAGS          The TRICK_CFLAGS & TRICK_CXXFLAGS environment variables
  TRICK_CXXFLAGS        must add the JEOD models directory to the include path
                        list. The variable must contain "-I${JEOD_HOME}/models".

  TRICK_HOME            The adjacent list of three additional Trick environment
  TRICK_VER             variables is just a partial list of those required by
  TRICK_HOST_CPU        Trick. Please refer to Trick documentation for details.


It is recommended that the system administrator provide standard shell
scripts that properly set the above environment variables.

Simulation specification and compilation
----------------------------------------
Trick simulations are specified in an S_define file and built using the Trick-
provided trick-CP utility. Please refer to the Trick user manual for a
description of an S_define file and the use of trick-CP.

ER7_Utils
---------
There is no need to separately obtain the ER7_Utils package when JEOD is used
within a Trick environment. ER7_Utils is distributed with Trick as a
third-party package. The trick-CP utility makes the package visible to the
compiler via an include path that begins with "er7_utils/integration".

Required Package
---------
JEOD 5.1 requires installation of swig3 and cmake3


================================================================================
3. Key changes since the last production release (JEOD 5.1)
================================================================================

Support for Moon Mean Earth (ME) body fixed frame
-------------------------
JEOD v5.1 added support for an alternate planet-centered, planet-fixed
coordinate frame, the Mean Earth/Polar Axis frame (Moon_ME). It is defined such
that the z-axis is defined as the Moon's mean rotational pole and the prime
meridian is defined by the mean direction of Earth. Moon_ME frame is the
alternative body fixed frame that is often used in data collected by LRO
instrumentation.


Kinematic Attachment
-------------------------
A kinematic attachment capability was added for MassBody and DynBody in
JEOD v5.1. This capability allow users to attach/detach MassBody/DynBody to/from
another Body object or RefFrame object. This attachment will not have any
dynamics effect on the parent object when attach/detach. The capability would be
ideal to attach a dynamic vehicle to a planet before launch or after landing.


Integration Frame override after detach
-------------------------
Updated the model documentation to explain the expected behavior of child body's
integration frame when it was detached from the parent body.
  - "When two bodies attach, the child body takes on the integration frame of
     the parent body. When the bodies detach, the child body retains the
     integration frame of the parent body, rather than reverting to its original
     integration frame. This is because JEOD cannot safely assume that the
     original integration frame of the child body is still the most appropriate
     frame. On the contrary, two vehicles that were just attached are in close
     enough proximity that they would probably be best served by continuing to
     share the same integration frame."


Enhanced checkpoint-restart for standard STL containers
-------------------------
Checkpoint-restart for standard STL containers were updated for newer version
of Trick, which now recognizes some standard STLs. This allow users to create a
checkpoint of the variables that are type of standard STL, and then load the
checkpoints during a restart. Verification sim for checkpoint-restart was also
updated for JEOD v5.1 to test dynamically allocated objects.


Improved code security
-------------------------
A number of code security improvements were made based on result from the
static analysis tools.


Improve verification sims
-------------------------
A number of verification sims were improved for JEOD v5.1 release. These
include the verification sim for SPICE and checkpoint-restart, and training sims
for the JEOD tutorial


================================================================================
4. Known issues
================================================================================

The issues known to exist with the JEOD 5.1 release are:

* Non-Trick demonstration.
  The demonstration of the usability of JEOD outside the Trick environment is
  not currently maintained and may not work with this release.

* Trick support.
  JEOD 5.1 is officially tested with Trick 19.6.0 or newer. Backward
  compatibility with older versions of Trick are not guarantee, but most models
  should still work with Trick 19.0 or newer. Users are strongly encouraged to
  upgrade to a newer version of Trick if their project allows.

* Trickified build works for all the regression test sims on CentOS 7,
  Ubuntu 18 and Oracle Linux 8. However, some sims did not build with
  Trickified on M1 MacOS during the regression test. All the sims build 
  using standard Trick compilation on M1 MacOS. This issue will be 
  investigated in later release

* Experimental models.
  For this release, there is a directory named $JEOD_HOME/models/experimental.
  It contains new models that have NOT been rigorously verified or
  documented up to typical JEOD standards. Users planning to utilize these 
  experimental models should understand the risks associated with them and 
  that there are currently NO plans for documentation and verification of 
  these models.


================================================================================
5. Regression testing
================================================================================

Several regression tests are provided with this release. These regression tests
are used internally to verify that the release behaves as expected. These tests
are not necessarily the same tests used for validation. External users can use
these tests to verify that their installation of JEOD yields results comparable
to those supplied with the release. The regression tests are located in

* $JEOD_HOME/verif
  This directory contains the simulations used to verify that JEOD operates
  correctly as a whole.

* $JEOD_HOME/sims
   This directory contains an abbreviated Apollo simulation.

* The verif subdirectories found in the JEOD model directories. Some of these
  contain simulations supplied with regression test data. Most models contain
  verification simulations or unit tests.

  Note: A small number of these model verification tests fail by design.
  All simulation runs that intentionally fail have fail or FAIL embedded
  in the simulation RUN directory name.

Caveats:
* All regression test data supplied with the release were generated using a
  64-bit machine running CentOS 7.5 and compiled with gcc 4.8.5 and Oracle
  Linux 8 with gcc 8.5.0. Users should not expect exact numeric matches when
  using a different machine architecture, a different operating system, or a
  different compiler.

  An extreme example of this is the RUN_euler case of the
  utils/integration/verif/SIM_integ sim. The stability of the Euler method
  is such that the results of this case are "confusion-limited"; that is, the
  results for this case exhibit chaotic system-dependent behavior. Note that
  use of the Euler integration method is generally not recommended.

* Regression test scripts are provided in JEOD v5.1. These scripts are used
  internally to verify the release behaves as expected. Users planning to use
  these scripts for their own regression test are free to modify the script
  to fit their needs. However, no support will be provided for these regression
  test scripts.



================================================================================
6. Change history
================================================================================
****************************
JEOD 5.1, July 2023
****************************
* Changes to models.
  - Added support for Moon Mean Earth (Moon_ME) body fixed frame.
  - Added kinematic attachment capability.
  - Improved ease of use for calculating derivative states for a child body.
  - Improved checkpoint-restart for standard STL containers.
  - Improved ephemeris data generation using mako template.

* Changes to sims and unit tests.
  - Fixed SIM_spice.
  - Completed SIM_dyncomp_structure.
  - Added test cases to verify kinematic attachment.
  - Improved checkpoint-restart verification sim to test dynamically allocated
    objects.
  - Fixed training solution sims.

* Changes to Documentation
  - JEOD documentations were updated for the JEOD 5.1 release.

* Changes to tools.
  - Implemented static analysis job (CppCheck and Flawfinder) in CI.


****************************
JEOD 5.0, August 2022
****************************
* Changes to models.
  - removed some best estimated data (BED) from actual space mission from the
    software.
  - removed TCAM model and Atmosphere Interface models.
  - Updated checkpoint tag for standard STL containers.
  - Updated unit specification for angle.
  - Included new set of gravitational coefficients for Moon from GRAIL.

* Changes to sims and unit tests.
  - Removed SIM_Grace
  - Removed RUN_champ, RUN_envisat, RUN_iss, RUN_lageos, and RUN_tdrs from
    SIM_Earth_Moon
  - Training solution sims were updated to JEOD v5.0

* Changes to Documentation
  - Training documentations were to JEOD v5.0
  - Top-level JEOD documentation and some model documentations were updated
    such that they only contains information that are publicly releasable.
  - JEOD documentations were updated for the 5.0 release
  - Removed programmer information from the source code to prepare for open
    source

* Changes to tools.
  - Using CppCheck and Flawfinder for static analysis
  - Using Lcov for code coverage.
  - Implemented a manual code coverage job in CI
